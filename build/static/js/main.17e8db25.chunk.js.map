{"version":3,"sources":["reportWebVitals.js","services/notes.js","Study.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","baseUrl","getAll","axios","get","create","newObject","post","update","id","put","Note","note","toggleImpotance","label","important","console","log","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","Study","useState","notes","setNotes","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","responce","data","catch","error","notesToShow","filter","map","i","find","n","changeNote","cotent","setTimeout","toggleImpotanceOf","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gKAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,8BCNRQ,EAAU,kCAkBF,GACVC,OAjBW,WACX,OAAOC,IAAMC,IAAIH,IAiBjBI,OAdW,SAAAC,GACX,OAAOH,IAAMI,KAAKN,EAASK,IAc3BE,OAXW,SAACC,EAAIH,GAChB,OAAOH,IAAMO,IAAN,UAAaT,EAAb,YAAwBQ,GAAKH,K,OCTlCK,EAAO,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,gBACXC,EAAQF,EAAKG,UAAY,qBAAuB,iBAGtD,OAFAC,QAAQC,IAAI,WAAWL,GAGnB,qBAAIM,UAAU,OAAd,UACKN,EAAKO,QACN,wBAAQC,QAASP,EAAjB,SAAmCC,QAKzCO,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OACI,qBAAKJ,UAAU,QAAf,SAAwBI,KAI1BC,EAAS,WAOX,OACI,sBAAKC,MAPW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAW,IAIX,UACI,uBACA,gEA0FGC,EArFD,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBACA,GADA,UAC8BA,oBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAwCJ,mBAAS,yBAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACNC,EACKnC,SACAP,MAAK,SAAA2C,GACFtB,QAAQC,IAAI,YACZc,EAASO,EAASC,SAErBC,OAAM,SAAAC,GACHzB,QAAQC,IAAI,aAEtB,IAEF,IAAMyB,EAAcV,EACdF,EACAA,EAAMa,QAAO,SAAA/B,GAAI,OAAuB,IAAnBA,EAAKG,aAEhCC,QAAQC,IAAI,MAAOa,GACnBd,QAAQC,IAAI,YAAYyB,GAuCxB,OACI,gCACI,uCACA,cAAC,EAAD,CAAcpB,QAASY,IACvB,8BACI,yBAAQd,QAAS,kBAAMa,GAAYD,IAAnC,kBACUA,EAAU,YAAc,WAGtC,6BACKU,EAAYE,KAAI,SAAChC,EAAMiC,GAAP,OACb,cAAC,EAAD,CAEIjC,KAAQA,EACRC,gBAAmB,kBAnDb,SAACJ,GACvB,IAAMG,EAAOkB,EAAMgB,MAAK,SAAAC,GAAC,OAAIA,EAAEtC,KAAOA,KAChCuC,EAAU,2BAAOpC,GAAP,IAAaG,WAAYH,EAAKG,YAG9CsB,EACK7B,OAAOC,EAAIuC,GACXrD,MAAK,SAAA2C,GACFP,EAASD,EAAMc,KAAI,SAAAhC,GAAI,OAAIA,EAAKH,KAAOA,EAAKG,EAAO0B,EAASC,YAE/DC,OAAM,SAAAC,GACHN,EAAgB,aAAD,OACEvB,EAAKqC,OADP,uCAGfC,YAAW,WACPf,EAAgB,QACjB,KACHJ,EAASD,EAAMa,QAAO,SAAAI,GAAC,OAAIA,EAAEtC,KAAOA,SAkCH0C,CAAkBvC,EAAKH,MAFzCoC,QAMnB,cAAC,EAAD,QC3GZO,IAASC,OACP,cAAC,IAAMC,WAAP,UAGE,cAAC,EAAD,MAGFC,SAASC,eAAe,SAM1BhE,M","file":"static/js/main.17e8db25.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from 'axios'\nconst baseUrl = 'http://localhost:3002/api/notes'\n\nconst getAll = () => {\n    return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n    return axios.post(baseUrl, newObject)\n}\n\nconst update = (id, newObject) => {\n    return axios.put(`${baseUrl}/${id}`,newObject)\n}\n\n// const deleteItem = (id) => {\n//     return axios.delete(`${baseUrl}/${id}`)\n// }\n\nexport default{\n    getAll: getAll,\n    create: create,\n    update: update,\n    // deleteItem: deleteItem\n}","import { useEffect, useState } from 'react';\nimport noteService from './services/notes';\n\nconst Note = ({note, toggleImpotance}) => {\n    const label = note.important ? 'make not important' : 'make important'\n    console.log('note is ',note);\n\n    return(\n        <li className='note'>\n            {note.content}\n            <button onClick={toggleImpotance}>{label}</button>\n        </li>\n    )\n}\n\nconst Notification = ({ message }) => {\n    return (\n        <div className='error'>{message}</div>\n    )\n}\n\nconst Footer = () => {\n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize:  16\n    }\n\n    return (\n        <div style={footerStyle}>\n            <br />\n            <em>Note app, desighed by sike</em>\n        </div>\n    )\n}\n\nconst Study = () =>{\n    const [notes, setNotes] = useState([]) \n    const [newNote, setNewNote] = useState('')\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState('some error happend...')\n\n    useEffect(() => {\n        noteService\n            .getAll()\n            .then(responce => {\n                console.log('success!');\n                setNotes(responce.data)\n            })\n            .catch(error => {\n                console.log('fail');\n            })\n    },[])\n\n    const notesToShow = showAll\n        ? notes\n        : notes.filter(note => note.important === true)\n\n    console.log('all', notes);\n    console.log('important',notesToShow);\n\n    const toggleImpotanceOf = (id) => {\n        const note = notes.find(n => n.id === id)\n        const changeNote = {...note, important: !note.important}\n        // console.log('importance of ' + id + ' needs to be toggled');\n\n        noteService\n            .update(id, changeNote)\n            .then(responce => {\n                setNotes(notes.map(note => note.id !== id ? note : responce.data))\n            })\n            .catch(error => {\n                setErrorMessage(\n                    `the note '${note.cotent}' was already deleted from server `   \n                )\n                setTimeout(() => {\n                    setErrorMessage(null)\n                }, 5000)\n                setNotes(notes.filter(n => n.id !== id))\n            })\n    }\n\n    const addNote = (event) => {\n        event.preventDefault()\n        const noteObject = {\n            cotent: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() > 0.5\n        }\n    }\n\n    // noteService\n    //     .create(noteObject)\n    //     .then(responce => {\n    //         setNotes(notes.concat(responce.data))\n    //         setNewNote('')\n    //     })\n\n    return (\n        <div>\n            <h1>Notes</h1>\n            <Notification message={errorMessage} />\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? 'important' : 'all'}\n                </button>\n            </div>\n            <ul>\n                {notesToShow.map((note, i) => \n                    <Note \n                        key = {i}\n                        note = {note}\n                        toggleImpotance = {() => toggleImpotanceOf(note.id)}\n                    />\n                )}\n            </ul>\n            <Footer />\n        </div>\n    )\n}\n\nexport default Study;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\n// import Test from './Test'\nimport reportWebVitals from './reportWebVitals';\nimport Study from './Study';\nimport PhoneBook from './PhoneBook';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <App /> */}\n    {/* <Test /> */}\n    <Study />\n    {/* <PhoneBook /> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}